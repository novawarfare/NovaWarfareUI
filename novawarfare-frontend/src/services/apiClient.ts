import axios, { 
  AxiosRequestConfig, 
  AxiosResponse, 
  AxiosError,
  InternalAxiosRequestConfig 
} from 'axios';
import { getAuthData, refreshToken, saveAuthData, clearAuthData, performLogout } from './authService';
import { API_URL } from '../constants/api';

// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
// const API_URL = 'https://localhost:7261';

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
class ApiClient {
  private static instance: ApiClient;
  private isRefreshing = false;
  private refreshSubscribers: ((token: string) => void)[] = [];

  private constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–æ–≤
    this.setupInterceptors();
  }

  public static getInstance(): ApiClient {
    if (!ApiClient.instance) {
      ApiClient.instance = new ApiClient();
    }
    return ApiClient.instance;
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è axios —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∞–º–∏
  private setupInterceptors(): void {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    axios.interceptors.request.use(
      (config: InternalAxiosRequestConfig) => {
        const { token } = getAuthData();
        if (token) {
          config.headers = config.headers || {};
          config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
      },
      (error: AxiosError) => Promise.reject(error)
    );

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    axios.interceptors.response.use(
      (response: AxiosResponse) => response,
      async (error: AxiosError) => {
        const originalRequest = error.config;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ 401 –∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        if (error.response?.status === 401 && 
            originalRequest && 
            originalRequest.url !== `${API_URL}/api/auth/refresh-token`) {
          
          // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          if (!this.isRefreshing) {
            this.isRefreshing = true;
            
            try {
              const { token: oldToken, refreshToken: oldRefreshToken } = getAuthData();
              
              if (oldToken && oldRefreshToken) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
                try {
                  console.log('üîÑ Trying to refresh token...');
                  console.log('Old token exp:', JSON.parse(atob(oldToken.split('.')[1])).exp);
                  console.log('Refresh token:', oldRefreshToken.substring(0, 20) + '...');
                  console.log('Current time:', Date.now());
                  
                  const response = await refreshToken(oldToken, oldRefreshToken);
                  
                  console.log('‚úÖ Token refreshed successfully!');
                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
                  saveAuthData(response);
                  
                  // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                  this.onRefreshed(response.token);

                  // –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                  if (originalRequest.headers) {
                    originalRequest.headers.Authorization = `Bearer ${response.token}`;
                  }
                  
                  // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                  return axios(originalRequest);
                } catch (refreshError) {
                  console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω:', refreshError);
                  performLogout();
                  return Promise.reject(error);
                }
              } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥
                performLogout();
                return Promise.reject(error);
              }
            } catch (error) {
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥
              performLogout();
              return Promise.reject(error);
            } finally {
              this.isRefreshing = false;
              this.refreshSubscribers = [];
            }
          }
          
          // –ï—Å–ª–∏ –º—ã —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
          const retryOriginalRequest = new Promise(resolve => {
            this.addSubscriber((token: string) => {
              if (originalRequest.headers) {
                originalRequest.headers.Authorization = `Bearer ${token}`;
              }
              resolve(axios(originalRequest));
            });
          });
          
          return retryOriginalRequest;
        }
        
        return Promise.reject(error);
      }
    );
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  private addSubscriber(callback: (token: string) => void): void {
    this.refreshSubscribers.push(callback);
  }

  // –í—ã–∑–æ–≤ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
  private onRefreshed(token: string): void {
    this.refreshSubscribers.forEach(callback => callback(token));
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
  public async get<T>(url: string, config?: AxiosRequestConfig): Promise<T> {
    const response = await axios.get<T>(`${API_URL}${url}`, config);
    return response.data;
  }

  public async post<T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {
    const response = await axios.post<T>(`${API_URL}${url}`, data, config);
    return response.data;
  }

  public async put<T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {
    const response = await axios.put<T>(`${API_URL}${url}`, data, config);
    return response.data;
  }

  public async delete<T>(url: string, config?: AxiosRequestConfig): Promise<T> {
    const response = await axios.delete<T>(`${API_URL}${url}`, config);
    return response.data;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç–∞–Ω—Å
export const apiClient = ApiClient.getInstance();
export default apiClient; 