import apiClient from './apiClient';
import { Clan, ClanRank, ClanMember, CreateClanRequest, ClanSearchResult, ClanListResponse } from '../types/clan';
import { API_URL } from '../constants/api';

class ClanService {
  private baseUrl = '/api/clans';
  
  // –ü—Ä–æ—Å—Ç–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  private cache = new Map<string, { data: any; timestamp: number }>();
  private cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  constructor() {
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.clearCache();
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  private clearCache() {
    this.cache.clear();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
  private getCachedData(key: string): any | null {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
      return cached.data;
    }
    return null;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à
  private setCachedData(key: string, data: any) {
    this.cache.set(key, { data, timestamp: Date.now() });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª–∞–Ω—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  async getAllClans(page: number = 1, pageSize: number = 20, type?: string): Promise<ClanListResponse> {
    const cacheKey = `all-clans-${page}-${pageSize}-${type || 'all'}`;
    const cached = this.getCachedData(cacheKey);
    if (cached) {
      return cached;
    }
    try {
      let url = `${this.baseUrl}?page=${page}&pageSize=${pageSize}`;
      if (type) {
        url += `&type=${type}`;
      }
      
      const response = await apiClient.get<ClanListResponse>(url);
      
      this.setCachedData(cacheKey, response);
      return response;
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–ª–∞–Ω—ã
  async getTopClans(limit: number = 10, type?: string): Promise<Clan[]> {
    const cacheKey = `top-clans-${limit}-${type || 'all'}`;
    const cached = this.getCachedData(cacheKey);
    if (cached) {
      return cached;
    }
    try {
      let url = `${this.baseUrl}/top?limit=${limit}`;
      if (type) {
        url += `&type=${type}`;
      }
      
      const response = await apiClient.get<Clan[]>(url);
      
      this.setCachedData(cacheKey, response);
      return response;
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø –∫–ª–∞–Ω–æ–≤', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–ª–∞–Ω—ã –ø–æ —Ç–∏–ø—É (—É–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥)
  async getTopClansByType(type: string, limit: number = 10): Promise<Clan[]> {
    return this.getTopClans(limit, type);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–Ω—ã –ø–æ —Ç–∏–ø—É (—É–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥)
  async getClansByType(type: string, page: number = 1, pageSize: number = 20): Promise<ClanListResponse> {
    return this.getAllClans(page, pageSize, type);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–Ω –ø–æ ID
  async getClanById(clanId: string): Promise<Clan> {
    const cacheKey = `clan-${clanId}`;
    const cached = this.getCachedData(cacheKey);
    if (cached) {
      return cached;
    }
    try {
      const response = await apiClient.get<Clan>(`${this.baseUrl}/${clanId}`);
      
      this.setCachedData(cacheKey, response);
      return response;
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞
  async getClanMembers(clanId: string): Promise<ClanMember[]> {
    const cacheKey = `clan-members-${clanId}`;
    const cached = this.getCachedData(cacheKey);
    if (cached) {
      return cached;
    }
    try {
      const response = await apiClient.get<ClanMember[]>(`${this.baseUrl}/${clanId}/members`);
      console.log('ClanService: –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã', response);
      
      this.setCachedData(cacheKey, response);
      return response;
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–≥–∏ –∫–ª–∞–Ω–æ–≤
  async getClanRanks(): Promise<ClanRank[]> {
    const cacheKey = 'clan-ranks';
    const cached = this.getCachedData(cacheKey);
    if (cached) {
      console.log('ClanService: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–Ω–≥–∏ –∫–ª–∞–Ω–æ–≤');
      return cached;
    }

    console.log('ClanService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–≥–æ–≤ –∫–ª–∞–Ω–æ–≤');
    try {
      const response = await apiClient.get<ClanRank[]>(`${this.baseUrl}/ranks`);
      console.log('ClanService: –†–∞–Ω–≥–∏ –∫–ª–∞–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã', response);
      
      this.setCachedData(cacheKey, response);
      return response;
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–Ω–≥–æ–≤ –∫–ª–∞–Ω–æ–≤', error);
      throw error;
    }
  }

  // –ü–æ–∏—Å–∫ –∫–ª–∞–Ω–æ–≤
  async searchClans(searchTerm: string, limit: number = 20): Promise<Clan[]> {
    console.log('ClanService: –ü–æ–∏—Å–∫ –∫–ª–∞–Ω–æ–≤', { searchTerm, limit });
    try {
      const response = await apiClient.get<Clan[]>(`${this.baseUrl}/search?term=${encodeURIComponent(searchTerm)}&limit=${limit}`);
      console.log('ClanService: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–ª–∞–Ω–æ–≤', response);
      return response;
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∞–Ω–æ–≤', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω
  async createClan(formData: FormData): Promise<Clan> {
    console.log('üöÄ ClanService: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞');
    console.log('üîß Base URL:', this.baseUrl);
    console.log('üîß API_URL:', API_URL);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    console.log('üìã FormData contents:');
    Array.from(formData.entries()).forEach(([key, value]) => {
      console.log(`  ${key}:`, value);
    });
    try {
      const fullUrl = `${API_URL}${this.baseUrl}`;
      const token = localStorage.getItem('token');
      
      console.log('üåê Full URL:', fullUrl);
      console.log('üîë Token:', token ? 'exists' : 'missing');
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º FormData –≤ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è JSON
      const jsonData: any = {};
      Array.from(formData.entries()).forEach(([key, value]) => {
        if (key !== 'logoFile') { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          jsonData[key] = value;
        }
      });
      
      console.log('üìã JSON data to send:', jsonData);
      
      const response = await fetch(fullUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(jsonData)
      });
      
      console.log('üì° Response status:', response.status);
      console.log('üì° Response headers:', response.headers);

      if (!response.ok) {
        console.error('‚ùå Server error response:', response.status, response.statusText);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (response.status === 401) {
          throw new Error('You are not authorized. Please log in and try again.');
        }
        
        // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON, –Ω–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç
        let errorMessage = 'Error creating clan';
        try {
          const errorData = await response.json();
          console.error('‚ùå Error data:', errorData);
          errorMessage = errorData.message || errorMessage;
        } catch (jsonError) {
          console.error('‚ùå Could not parse error JSON, trying text...');
          try {
            const errorText = await response.text();
            console.error('‚ùå Error text:', errorText);
            errorMessage = `Server error ${response.status}: ${response.statusText}`;
          } catch (textError) {
            console.error('‚ùå Could not read error response');
          }
        }
        
        throw new Error(errorMessage);
      }

      const clan = await response.json();
      console.log('ClanService: –ö–ª–∞–Ω —Å–æ–∑–¥–∞–Ω', clan);
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
      this.clearCache();
      
      return clan;
    } catch (error) {
      console.error('‚ùå ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–Ω–∞', error);
      
      if (error instanceof Error) {
        console.error('‚ùå Error type:', error.constructor.name);
        console.error('‚ùå Error message:', error.message);
      } else {
        console.error('‚ùå Unknown error type:', typeof error);
      }
      
      throw error;
    }
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª–∞–Ω—É
  async joinClan(clanId: string): Promise<void> {
    console.log('ClanService: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–ª–∞–Ω—É', clanId);
    try {
      await apiClient.post(`${this.baseUrl}/${clanId}/join`);
      console.log('ClanService: –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–ª–∞–Ω—É');
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      this.clearCache();
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–ª–∞–Ω—É', error);
      throw error;
    }
  }

  // –ü–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω
  async leaveClan(clanId: string): Promise<void> {
    console.log('ClanService: –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞', clanId);
    try {
      await apiClient.post(`${this.baseUrl}/${clanId}/leave`);
      console.log('ClanService: –£—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω');
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ –ø–æ–∫–∏–¥–∞–Ω–∏—è
      this.clearCache();
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –∫–ª–∞–Ω–∞', error);
      throw error;
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  async searchUsersForInvite(clanId: string, query: string, limit: number = 10): Promise<any[]> {
    console.log('ClanService: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', { clanId, query, limit });
    try {
      const response = await apiClient.get<any[]>(`${this.baseUrl}/${clanId}/search-users?query=${encodeURIComponent(query)}&limit=${limit}`);
      console.log('ClanService: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', response);
      return response;
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', error);
      throw error;
    }
  }

  // –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–ª–∞–Ω
  async inviteUserToClan(clanId: string, userId: string): Promise<void> {
    console.log('ClanService: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–ª–∞–Ω', { clanId, userId });
    try {
      await apiClient.post(`${this.baseUrl}/${clanId}/invite`, { userId });
      console.log('ClanService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –∫–ª–∞–Ω');
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      this.clearCache();
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
      throw error;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–ª–∞–Ω–∞
  async removeMemberFromClan(clanId: string, userId: string): Promise<void> {
    console.log('ClanService: –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–ª–∞–Ω–∞', { clanId, userId });
    try {
      await apiClient.post(`${this.baseUrl}/${clanId}/remove-member`, { userId });
      console.log('ClanService: –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–ª–∞–Ω–∞');
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      this.clearCache();
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞', error);
      throw error;
    }
  }

  // –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç–∞—Ä—à–µ–≥–æ –æ—Ñ–∏—Ü–µ—Ä–∞
  async assignSeniorOfficer(clanId: string, userId: string): Promise<void> {
    console.log('ClanService: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–µ–≥–æ –æ—Ñ–∏—Ü–µ—Ä–∞', { clanId, userId });
    try {
      await apiClient.post(`${this.baseUrl}/${clanId}/assign-senior-officer`, { userId });
      console.log('ClanService: –°—Ç–∞—Ä—à–∏–π –æ—Ñ–∏—Ü–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω');
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      this.clearCache();
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å—Ç–∞—Ä—à–µ–≥–æ –æ—Ñ–∏—Ü–µ—Ä–∞', error);
      throw error;
    }
  }

  // –°–Ω—è—Ç—å —Å—Ç–∞—Ä—à–µ–≥–æ –æ—Ñ–∏—Ü–µ—Ä–∞
  async removeSeniorOfficer(clanId: string): Promise<void> {
    console.log('ClanService: –°–Ω—è—Ç–∏–µ —Å—Ç–∞—Ä—à–µ–≥–æ –æ—Ñ–∏—Ü–µ—Ä–∞', clanId);
    try {
      await apiClient.post(`${this.baseUrl}/${clanId}/remove-senior-officer`);
      console.log('ClanService: –°—Ç–∞—Ä—à–∏–π –æ—Ñ–∏—Ü–µ—Ä —Å–Ω—è—Ç');
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è
      this.clearCache();
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ç–∞—Ä—à–µ–≥–æ –æ—Ñ–∏—Ü–µ—Ä–∞', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
  async canManageMembers(clanId: string): Promise<boolean> {
    console.log('ClanService: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏', clanId);
    try {
      const response = await apiClient.get<{ canManage: boolean }>(`${this.baseUrl}/${clanId}/can-manage-members`);
      console.log('ClanService: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤', response);
      return response.canManage;
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', error);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
  async updateClan(clanId: string, formData: FormData): Promise<Clan> {
    console.log('ClanService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ', { clanId });
    try {
      const response = await fetch(`${API_URL}${this.baseUrl}/${clanId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
          // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type, –±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç multipart/form-data
        },
        body: formData
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞');
      }

      const clan = await response.json();
      console.log('ClanService: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', clan);
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      this.clearCache();
      
      return clan;
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ', error);
      throw error;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–Ω–≥–∏ –∫–ª–∞–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async initializeClanRanks(): Promise<void> {
    console.log('ClanService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–Ω–≥–æ–≤ –∫–ª–∞–Ω–æ–≤');
    try {
      const result = await apiClient.post<{ message: string }>(`${this.baseUrl}/initialize-ranks`);
      console.log('ClanService: –†–∞–Ω–≥–∏ –∫–ª–∞–Ω–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã', result);
    } catch (error) {
      console.error('ClanService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–Ω–≥–æ–≤ –∫–ª–∞–Ω–æ–≤', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Ä–∞–Ω–≥–∞ –ø–æ —É—Ä–æ–≤–Ω—é
  getRankColor(rank: number): string {
    const colors = [
      '#8B4513', '#A0522D', '#CD853F', '#DEB887', '#F4A460', // 0-4
      '#D2691E', '#FF8C00', '#FF7F50', '#FF6347', '#FF4500', // 5-9
      '#DC143C', '#B22222', '#8B0000', '#4B0082', '#483D8B', // 10-14
      '#6A5ACD', '#9370DB', '#8A2BE2', '#9932CC', '#FFD700'  // 15-19
    ];
    return colors[rank] || '#9E9E9E';
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
  getRankProgress(points: number, currentRank: number, ranks: ClanRank[]): number {
    const currentRankData = ranks.find(r => r.level === currentRank);
    const nextRankData = ranks.find(r => r.level === currentRank + 1);

    if (!currentRankData || !nextRankData) {
      return 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥
    }

    const currentPoints = points - currentRankData.pointsRequired;
    const pointsNeeded = nextRankData.pointsRequired - currentRankData.pointsRequired;

    return Math.min(100, Math.max(0, (currentPoints / pointsNeeded) * 100));
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
  getPointsToNextRank(points: number, currentRank: number, ranks: ClanRank[]): number {
    const nextRankData = ranks.find(r => r.level === currentRank + 1);
    
    if (!nextRankData) {
      return 0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥
    }

    return Math.max(0, nextRankData.pointsRequired - points);
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
  formatNumber(num: number): string {
    return num.toLocaleString('ru-RU');
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∞–Ω–∞ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
  getClanStatus(clan: Clan): { label: string; color: string } {
    const now = new Date();
    const lastUpdate = clan.updatedAt ? new Date(clan.updatedAt) : new Date(clan.createdAt || now);
    const daysSinceUpdate = Math.floor((now.getTime() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24));

    if (daysSinceUpdate <= 1) {
      return { label: 'Very Active', color: '#4CAF50' };
    } else if (daysSinceUpdate <= 7) {
      return { label: 'Active', color: '#8BC34A' };
    } else if (daysSinceUpdate <= 30) {
      return { label: 'Moderately Active', color: '#FF9800' };
    } else {
      return { label: 'Inactive', color: '#F44336' };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∞–Ω–∞
  getClanEfficiencyRating(clan: Clan): { rating: number; label: string; color: string } {
    const winRate = clan.winRate || 0;
    const memberCount = clan.memberIds?.length || 0;
    const avgPointsPerMember = memberCount > 0 ? (clan.points || 0) / memberCount : 0;

    // –°–æ—Å—Ç–∞–≤–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ win rate, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—á–∫–æ–≤
    let rating = 0;
    rating += winRate * 0.4; // 40% –æ—Ç win rate
    rating += Math.min(100, avgPointsPerMember / 1000 * 100) * 0.3; // 30% –æ—Ç –æ—á–∫–æ–≤ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    rating += Math.min(100, memberCount * 5) * 0.3; // 30% –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

    let label = '';
    let color = '';

    if (rating >= 80) {
      label = 'Elite';
      color = '#FFD700';
    } else if (rating >= 60) {
      label = 'Excellent';
      color = '#4CAF50';
    } else if (rating >= 40) {
      label = 'Good';
      color = '#FF9800';
    } else if (rating >= 20) {
      label = 'Average';
      color = '#FFC107';
    } else {
      label = 'Rookie';
      color = '#9E9E9E';
    }

    return { rating: Math.round(rating), label, color };
  }
}

export default new ClanService(); 